// server.js

const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const session = require('express-session');
const cors = require('cors');
const webPush = require('web-push');
require('dotenv').config();

const { pool, initializeDB } = require('./db');
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const { router: authRouter } = require('./routes/authRoutes');
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
const adminRouter = require('./routes/adminRoutes'); 
// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç—ã —Ç–∏–∫–µ—Ç–æ–≤
const ticketRouter = require('./routes/ticketRoutes'); 

const app = express();
const server = http.createServer(app);

// -----------------------------------------------------
// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö
// -----------------------------------------------------
initializeDB();

// -----------------------------------------------------
// 0. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web-Push
// -----------------------------------------------------
const VAPID_KEYS = {
    publicKey: process.env.VAPID_PUBLIC_KEY,
    privateKey: process.env.VAPID_PRIVATE_KEY
};

if (VAPID_KEYS.publicKey && VAPID_KEYS.privateKey) {
    webPush.setVapidDetails(
        process.env.VAPID_SUBJECT,
        VAPID_KEYS.publicKey,
        VAPID_KEYS.privateKey
    );
} else {
    console.error("‚ùå VAPID –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env. Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.");
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
 */
async function sendPushNotification(userId, payload) {
    if (!VAPID_KEYS.publicKey) return; 

    try {
        const [users] = await pool.query(
            'SELECT push_subscription FROM users WHERE id = ?', 
            [userId]
        );

        if (users.length === 0 || !users[0].push_subscription) {
            console.log(`–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}.`);
            return;
        }

        const subscription = users[0].push_subscription;
        
        await webPush.sendNotification(subscription, JSON.stringify(payload));
        console.log(`‚úÖ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${userId}.`);

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ID ${userId}:`, error.message);
        if (error.statusCode === 410) {
             console.log(`–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ID ${userId}.`);
             await pool.query('UPDATE users SET push_subscription = NULL WHERE id = ?', [userId]);
        }
    }
}


// -----------------------------------------------------
// 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Middleware
// -----------------------------------------------------

const API_PORT = process.env.PORT || 3000;
const clientPort = process.env.CLIENT_PORT || 8080;

// –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö origin
const defaultAllowedOrigins = [
    `http://localhost:${API_PORT}`, 
    `http://localhost:${clientPort}`, 
    'http://127.0.0.1:5500', 
    'http://localhost:5500'
];

// –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ origin —á–µ—Ä–µ–∑ .env (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
const envAllowed = (process.env.ALLOWED_ORIGINS || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);

// –†–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥—Å–µ—Ç–µ–π (—Ä–∞–∑—Ä–µ—à–∞–µ–º –≤–µ—Å—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç)
const localNetRegexes = [
  /^http:\/\/192\.168\.\d{1,3}\.\d{1,3}:\d+$/,
  /^http:\/\/10\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d+$/,
  /^http:\/\/172\.(1[6-9]|2\d|3[0-1])\.\d{1,3}\.\d{1,3}:\d+$/
];

const allowedOrigins = [...defaultAllowedOrigins, ...envAllowed];

app.use(cors({
    origin: (origin, callback) => {
        // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, curl/—Å–µ—Ä–≤–µ—Ä-—Å–µ—Ä–≤–µ—Ä)
        if (!origin) return callback(null, true);

        // –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ + –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–µ—Ç–∏
        const allow = allowedOrigins.includes(origin) || localNetRegexes.some(rx => rx.test(origin));
        if (allow) return callback(null, true);

        console.warn(`CORS Reject: Origin ${origin} not allowed.`);
        callback(new Error(`Not allowed by CORS: ${origin}`));
    },
    credentials: true 
}));

// –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –°–µ—Å—Å–∏–π
const sessionMiddleware = session({
    secret: process.env.SESSION_SECRET,
    resave: false,
    saveUninitialized: false,
    name: 'connect.sid',
    cookie: { 
        secure: process.env.NODE_ENV === 'production', 
        httpOnly: true, 
        maxAge: 1000 * 60 * 60 * 24 
    }
});
app.use(sessionMiddleware);


// -----------------------------------------------------
// 3. –†–æ—É—Ç–∏–Ω–≥ API
// -----------------------------------------------------
// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ 'public'
app.use(express.static('public'));

// –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏–∑ –ø–∞–ø–∫–∏ 'uploads'
app.use('/uploads', express.static('uploads')); 

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
app.use('/api/auth', authRouter);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
app.use('/api/admin', adminRouter);

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–æ—É—Ç–æ–≤ —Ç–∏–∫–µ—Ç–æ–≤
app.use('/api/tickets', ticketRouter);


// -----------------------------------------------------
// 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO
// -----------------------------------------------------
// –î–ª—è Socket.IO –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –∏ RegExp ‚Äî —Ä–∞–∑—Ä–µ—à–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–µ—Ç–∏
const io = new Server(server, {
    cors: {
        origin: [
            ...allowedOrigins,
            ...localNetRegexes
        ],
        methods: ["GET", "POST"],
        credentials: true
    }
});

// –î–æ–±–∞–≤–ª—è–µ–º middleware —Å–µ—Å—Å–∏–π –≤ Socket.IO
io.engine.use(sessionMiddleware);


// -----------------------------------------------------
// 5. –ó–∞–ø—É—Å–∫ –°–µ—Ä–≤–µ—Ä–∞
// -----------------------------------------------------
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä Express/Socket.IO –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`–ë–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å: http://localhost:${PORT}`);
});


// -----------------------------------------------------
// 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π Socket.IO 
// -----------------------------------------------------

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î –ò –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞/–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
async function saveMessageToDB(ticketId, senderId, senderRole, messageText, attachmentUrl = null) {
    let connection;
    let newStatus = null;
    let recipientId = null;

    try {
        connection = await pool.getConnection();
        await connection.beginTransaction();

        // 1. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–∫–ª—é—á–∞—è –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É)
        await connection.query(
            'INSERT INTO messages (ticket_id, sender_id, message_text, attachment_url) VALUES (?, ?, ?, ?)',
            [ticketId, senderId, messageText, attachmentUrl]
        );

        const [ticket] = await connection.query('SELECT status, moderator_id, user_id FROM tickets WHERE id = ?', [ticketId]);
        const currentStatus = ticket[0].status;
        let moderatorId = ticket[0].moderator_id;
        const ticketOwnerId = ticket[0].user_id;
        
        recipientId = senderRole === 'user' ? (moderatorId || null) : ticketOwnerId;


        if (senderRole === 'moderator' || senderRole === 'admin') {
            
            if (currentStatus === 'New' || currentStatus === 'Successful' || currentStatus === 'Rejected') {
                newStatus = 'In Progress';
                
                if (!moderatorId) {
                    moderatorId = senderId;
                }

                await connection.query(
                    'UPDATE tickets SET status = ?, moderator_id = ?, closed_at = NULL WHERE id = ?', 
                    [newStatus, moderatorId, ticketId]
                );
                
                await connection.query(
                    'INSERT INTO status_history (ticket_id, user_id, old_status, new_status) VALUES (?, ?, ?, ?)',
                    [ticketId, senderId, currentStatus, newStatus]
                );
            }
        }
        
        await connection.commit();
        
        return { 
            isStatusUpdated: newStatus !== null, 
            newStatus: newStatus,
            recipientId: recipientId
        };

    } catch (error) {
        if (connection) await connection.rollback();
        console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î:', error);
        return { isStatusUpdated: false, newStatus: null, recipientId: null };
    } finally {
        if (connection) connection.release();
    }
}


io.on('connection', (socket) => {
    const userId = socket.request.session.userId;
    const role = socket.request.session.userRole;

    if (!userId) {
        socket.disconnect(true);
        return;
    }

    console.log(`–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω (ID: ${userId}, –†–æ–ª—å: ${role}). Socket ID: ${socket.id}`);
    
    // --- 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ö–æ–º–Ω–∞—Ç–µ –¢–∏–∫–µ—Ç–∞ ---
    socket.on('joinTicket', (ticketId) => {
        const roomName = `ticket-${ticketId}`; 
        socket.join(roomName);
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomName}`);
    });
    
    // --- 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ù–æ–≤–æ–≥–æ –°–æ–æ–±—â–µ–Ω–∏—è (Socket.IO) ---
    socket.on('sendMessage', async ({ ticketId, messageText }) => {
        const roomName = `ticket-${ticketId}`;
        
        if (!messageText || messageText.trim() === '') return;

        const senderUsername = socket.request.session.username;
        const senderRole = role;

        const { isStatusUpdated, newStatus, recipientId } = await saveMessageToDB(ticketId, userId, senderRole, messageText, null);
        
        const newMessage = {
            senderId: userId,
            senderUsername: senderUsername,
            senderRole: senderRole,
            messageText: messageText,
            createdAt: new Date().toISOString(),
            ticketId: ticketId
        };
        
        io.to(roomName).emit('receiveMessage', newMessage);
        
        if (recipientId) {
            const isModerator = senderRole === 'moderator' || senderRole === 'admin';
            const bodyText = isModerator 
                ? `–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–∏–∫–µ—Ç #${ticketId}.`
                : `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: "${messageText.substring(0, 30)}..."`;
                
            sendPushNotification(recipientId, {
                title: `[ZERO] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`,
                body: bodyText,
                url: isModerator ? `/user.html` : `/moder.html` 
            });
        }

        if (isStatusUpdated) {
            io.emit('ticketStatusUpdate', { ticketId: ticketId, newStatus: newStatus });
        }
    });

    // --- 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –í—Ä—É—á–Ω—É—é –ò–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –°—Ç–∞—Ç—É—Å–∞ ---
    socket.on('statusUpdated', async (data) => {
        io.emit('ticketStatusUpdate', { 
            ticketId: data.ticketId, 
            newStatus: data.newStatus, 
            timeSpent: data.timeSpent || null
        });
        
        const [ticket] = await pool.query('SELECT user_id FROM tickets WHERE id = ?', [data.ticketId]);
        
        if (ticket.length > 0) {
            sendPushNotification(ticket[0].user_id, {
                title: `[ZERO] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞`,
                body: `–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ —Ç–∏–∫–µ—Ç–∞ #${data.ticketId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${data.newStatus}"`,
                url: `/user.html`
            });
        }
    });
    
    // --- 4. –í—ã—Ö–æ–¥ –∏–∑ –ö–æ–º–Ω–∞—Ç—ã –¢–∏–∫–µ—Ç–∞ ---
    socket.on('leaveTicket', (ticketId) => {
        const roomName = `ticket-${ticketId}`; 
        socket.leave(roomName);
        console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${roomName}`);
    });


    socket.on('disconnect', () => {
        console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω. Socket ID: ${socket.id}`);
    });
});


// -----------------------------------------------------
// 7. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π JSON-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
// -----------------------------------------------------
app.use((err, req, res, next) => {
  console.error('Unhandled error:', err);
  if (res.headersSent) return next(err);
  res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});