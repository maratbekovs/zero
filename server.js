// server.js

const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const session = require('express-session');
const cors = require('cors');
const webPush = require('web-push');
const path = require('path');
require('dotenv').config();

const { pool, initializeDB } = require('./db');
const { router: authRouter } = require('./routes/authRoutes');
const adminRouter = require('./routes/adminRoutes');
const ticketRouter = require('./routes/ticketRoutes');

const app = express();
const server = http.createServer(app);

// -----------------------------------------------------
// 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–∞–∑—ã –î–∞–Ω–Ω—ã—Ö
// -----------------------------------------------------
initializeDB();

// -----------------------------------------------------
// 0. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Web-Push
// -----------------------------------------------------
const VAPID_KEYS = {
  publicKey: process.env.VAPID_PUBLIC_KEY,
  privateKey: process.env.VAPID_PRIVATE_KEY
};

if (VAPID_KEYS.publicKey && VAPID_KEYS.privateKey) {
  webPush.setVapidDetails(
    process.env.VAPID_SUBJECT || 'mailto:admin@example.com',
    VAPID_KEYS.publicKey,
    VAPID_KEYS.privateKey
  );
} else {
  console.error('‚ùå VAPID –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env. Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.');
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ –µ–≥–æ ID.
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç JSON –≤ subscription –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
 */
async function sendPushNotification(userId, payload) {
  if (!VAPID_KEYS.publicKey) return;

  try {
    const [users] = await pool.query(
      'SELECT push_subscription FROM users WHERE id = ?',
      [userId]
    );
    if (!users.length || !users[0].push_subscription) {
      console.log(`–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID ${userId}.`);
      return;
    }

    let subscription = users[0].push_subscription;
    if (typeof subscription === 'string') {
      try { subscription = JSON.parse(subscription); } catch { subscription = null; }
    }
    if (!subscription) return;

    await webPush.sendNotification(subscription, JSON.stringify(payload));
    console.log(`‚úÖ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ID ${userId}.`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ID ${userId}:`, error.message);
    if (error.statusCode === 410) {
      console.log(`–£–¥–∞–ª–µ–Ω–∏–µ —É—Å—Ç–∞—Ä–µ–≤—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ID ${userId}.`);
      await pool.query('UPDATE users SET push_subscription = NULL WHERE id = ?', [userId]);
    }
  }
}

/**
 * –ú–∞—Å—Å–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º/–∞–¥–º–∏–Ω–∞–º (–µ—Å–ª–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –µ—â—ë –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω).
 */
async function sendPushNotificationToModerators(payload) {
  if (!VAPID_KEYS.publicKey) return;
  try {
    const [mods] = await pool.query(
      "SELECT id, push_subscription FROM users WHERE role IN ('moderator','admin') AND push_subscription IS NOT NULL"
    );
    for (const m of mods) {
      let subscription = m.push_subscription;
      if (typeof subscription === 'string') {
        try { subscription = JSON.parse(subscription); } catch { subscription = null; }
      }
      if (!subscription) continue;
      try {
        await webPush.sendNotification(subscription, JSON.stringify(payload));
      } catch (e) {
        if (e.statusCode === 410) {
          await pool.query('UPDATE users SET push_subscription = NULL WHERE id = ?', [m.id]);
        }
      }
    }
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º:', e.message);
  }
}

// -----------------------------------------------------
// 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Middleware
// -----------------------------------------------------

const API_PORT = process.env.PORT || 3000;
const clientPort = process.env.CLIENT_PORT || 8080;

// –ë–∞–∑–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –ª–æ–∫–∞–ª—å–Ω—ã—Ö origin
const defaultAllowedOrigins = [
  `http://localhost:${API_PORT}`,
  `http://localhost:${clientPort}`,
  'http://127.0.0.1:5500',
  'http://localhost:5500'
];

// –†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —Å–≤–æ–∏ origin —á–µ—Ä–µ–∑ .env (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
const envAllowed = (process.env.ALLOWED_ORIGINS || '')
  .split(',')
  .map(s => s.trim())
  .filter(Boolean);

// –†–µ–≥—É–ª—è—Ä–∫–∏ –¥–ª—è —Ç–∏–ø–∏—á–Ω—ã—Ö –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ–¥—Å–µ—Ç–µ–π (—Ä–∞–∑—Ä–µ—à–∞–µ–º –≤–µ—Å—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ–≥–º–µ–Ω—Ç)
const localNetRegexes = [
  /^http:\/\/192\.168\.\d{1,3}\.\d{1,3}:\d+$/,
  /^http:\/\/10\.\d{1,3}\.\d{1,3}\.\d{1,3}:\d+$/,
  /^http:\/\/172\.(1[6-9]|2\d|3[0-1])\.\d{1,3}\.\d{1,3}:\d+$/
];

const allowedOrigins = [...defaultAllowedOrigins, ...envAllowed];

app.use(cors({
  origin: (origin, callback) => {
    if (!origin) return callback(null, true);
    const allow = allowedOrigins.includes(origin) || localNetRegexes.some(rx => rx.test(origin));
    if (allow) return callback(null, true);
    console.warn(`CORS Reject: Origin ${origin} not allowed.`);
    return callback(new Error(`Not allowed by CORS: ${origin}`));
  },
  credentials: true
}));

// –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
app.use(express.json());
app.use('/uploads', express.static(path.join(__dirname, 'uploads')));
app.use(express.urlencoded({ extended: true }));

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –°–µ—Å—Å–∏–π
const sessionMiddleware = session({
  secret: process.env.SESSION_SECRET,
  resave: false,
  saveUninitialized: false,
  name: 'connect.sid',
  cookie: {
    secure: process.env.NODE_ENV === 'production',
    httpOnly: true,
    maxAge: 1000 * 60 * 60 * 24
  }
});
app.use(sessionMiddleware);

// -----------------------------------------------------
// 3. –†–æ—É—Ç–∏–Ω–≥ API
// -----------------------------------------------------
// –°—Ç–∞—Ç–∏–∫–∞
app.use(express.static('public'));
app.use('/uploads', express.static('uploads'));

// –†–æ—É—Ç—ã
app.use('/api/auth', authRouter);
app.use('/api/admin', adminRouter);
app.use('/api/tickets', ticketRouter);

// -----------------------------------------------------
// 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Socket.IO
// -----------------------------------------------------
const io = new Server(server, {
  cors: {
    origin: [
      ...allowedOrigins,
      ...localNetRegexes
    ],
    methods: ['GET', 'POST'],
    credentials: true
  }
});
io.engine.use(sessionMiddleware);

// –°–¥–µ–ª–∞–µ–º io –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ REST-—Ä–æ—É—Ç–∞—Ö
app.set('io', io);

// -----------------------------------------------------
// 5. –ó–∞–ø—É—Å–∫ –°–µ—Ä–≤–µ—Ä–∞
// -----------------------------------------------------
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä Express/Socket.IO –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
  console.log(`–ë–∞–∑–æ–≤—ã–π –∞–¥—Ä–µ—Å: http://localhost:${PORT}`);
});

// -----------------------------------------------------
// 6. –û–±—Ä–∞–±–æ—Ç–∫–∞ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π Socket.IO
// -----------------------------------------------------

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î + –∞–≤—Ç–æ-–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ/—Å—Ç–∞—Ç—É—Å
async function saveMessageToDB(ticketId, senderId, senderRole, messageText, attachmentUrl = null) {
  let connection;
  let newStatus = null;
  let recipientId = null;

  try {
    connection = await pool.getConnection();
    await connection.beginTransaction();

    // –°–æ–æ–±—â–µ–Ω–∏–µ
    await connection.query(
      'INSERT INTO messages (ticket_id, sender_id, message_text, attachment_url) VALUES (?, ?, ?, ?)',
      [ticketId, senderId, messageText, attachmentUrl]
    );

    // –¢–∏–∫–µ—Ç
    const [ticket] = await connection.query(
      'SELECT status, moderator_id, user_id FROM tickets WHERE id = ?',
      [ticketId]
    );
    const currentStatus = ticket[0].status;
    let moderatorId = ticket[0].moderator_id;
    const ticketOwnerId = ticket[0].user_id;

    recipientId = senderRole === 'user' ? (moderatorId || null) : ticketOwnerId;

    if (senderRole === 'moderator' || senderRole === 'admin') {
      if (['New', 'Successful', 'Rejected'].includes(currentStatus)) {
        newStatus = 'In Progress';
        if (!moderatorId) moderatorId = senderId;

        await connection.query(
          'UPDATE tickets SET status = ?, moderator_id = ?, closed_at = NULL WHERE id = ?',
          [newStatus, moderatorId, ticketId]
        );

        await connection.query(
          'INSERT INTO status_history (ticket_id, user_id, old_status, new_status) VALUES (?, ?, ?, ?)',
          [ticketId, senderId, currentStatus, newStatus]
        );
      }
    }

    await connection.commit();

    return {
      isStatusUpdated: newStatus !== null,
      newStatus,
      recipientId
    };
  } catch (error) {
    if (connection) await connection.rollback();
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î:', error);
    return { isStatusUpdated: false, newStatus: null, recipientId: null };
  } finally {
    if (connection) connection.release();
  }
}

io.on('connection', (socket) => {
  const userId = socket.request.session.userId;
  const role = socket.request.session.userRole;

  if (!userId) {
    socket.disconnect(true);
    return;
  }
  // –í—Å—Ç—É–ø–∞–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–º–∏/–∞–¥–º–∏–Ω—Å–∫–∏–º–∏ —Å–æ–∫–µ—Ç–∞–º–∏ –≤ –∫–æ–º–Ω–∞—Ç—É "moderators"
if (role === 'moderator' || role === 'admin') {
  socket.join('moderators');
}

  console.log(`–ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω (ID: ${userId}, –†–æ–ª—å: ${role}). Socket ID: ${socket.id}`);

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–æ–º–Ω–∞—Ç–µ —Ç–∏–∫–µ—Ç–∞
  socket.on('joinTicket', (ticketId) => {
    const roomName = `ticket-${ticketId}`;
    socket.join(roomName);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomName}`);
  });

  // –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  socket.on('sendMessage', async ({ ticketId, messageText }) => {
    const roomName = `ticket-${ticketId}`;
    if (!messageText || messageText.trim() === '') return;

    const senderUsername = socket.request.session.username;
    const senderRole = role;

    const { isStatusUpdated, newStatus, recipientId } =
      await saveMessageToDB(ticketId, userId, senderRole, messageText, null);

    const newMessage = {
      senderId: userId,
      senderUsername,
      senderRole,
      messageText,
      createdAt: new Date().toISOString(),
      ticketId
    };

    io.to(roomName).emit('receiveMessage', newMessage);

    // Push: –∞–¥—Ä–µ—Å–Ω–æ –ª–∏–±–æ –≤—Å–µ–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º, –µ—Å–ª–∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω
    if (recipientId) {
      const isModerator = senderRole === 'moderator' || senderRole === 'admin';
      const bodyText = isModerator
        ? `–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏–ª –≤ —Ç–∏–∫–µ—Ç #${ticketId}.`
        : `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: "${messageText.substring(0, 30)}..."`;
      sendPushNotification(recipientId, {
        title: `[ZERO] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`,
        body: bodyText,
        url: isModerator ? `/user.html` : `/moder.html`
      });
    } else if (senderRole === 'user') {
      await sendPushNotificationToModerators({
        title: `[ZERO] –ù–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å`,
        body: `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∏–∫–µ—Ç–µ #${ticketId}`,
        url: `/moder.html`
      });
    }

    if (isStatusUpdated) {
      io.emit('ticketStatusUpdate', { ticketId, newStatus });
    }
  });

  // –í—Ä—É—á–Ω—É—é –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å
  socket.on('statusUpdated', async (data) => {
    io.emit('ticketStatusUpdate', {
      ticketId: data.ticketId,
      newStatus: data.newStatus,
      timeSpent: data.timeSpent || null
    });

    const [ticket] = await pool.query('SELECT user_id FROM tickets WHERE id = ?', [data.ticketId]);
    if (ticket.length > 0) {
      sendPushNotification(ticket[0].user_id, {
        title: `[ZERO] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞`,
        body: `–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ —Ç–∏–∫–µ—Ç–∞ #${data.ticketId} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ "${data.newStatus}"`,
        url: `/user.html`
      });
    }
  });

  socket.on('leaveTicket', (ticketId) => {
    const roomName = `ticket-${ticketId}`;
    socket.leave(roomName);
    console.log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${roomName}`);
  });

  socket.on('disconnect', () => {
    console.log(`–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω. Socket ID: ${socket.id}`);
  });
});

// -----------------------------------------------------
// 7. –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π JSON-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
// -----------------------------------------------------
app.use((err, _req, res, next) => {
  console.error('Unhandled error:', err);
  if (res.headersSent) return next(err);
  res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});