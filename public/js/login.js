// public/js/login.js ‚Äî —Ñ–æ—Ä–º–∞ –≤—Ö–æ–¥–∞ + –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã (dark –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
document.addEventListener('DOMContentLoaded', () => {
  const API_BASE = '/api';

  // Elements
  const formLogin = byId('form-login');
  const loginUsername = byId('login-username');
  const loginPassword = byId('login-password');
  const toggleLoginPass = byId('toggle-login-pass');
  const btnLogin = byId('btn-login');
  const btnLoginText = byId('btn-login-text');
  const btnLoginSpinner = byId('btn-login-spinner');
  const loginMsg = byId('login-msg');
  const globalMsg = byId('global-msg');
  const capsHint = byId('caps-hint');
  const themeToggle = byId('theme-toggle');

  // Helpers
  function byId(id){ return document.getElementById(id); }
  function show(el){ el && el.classList.remove('hidden'); }
  function hide(el){ el && el.classList.add('hidden'); }
  function setBusy(btn, spinner, textEl, busy, textDefault){
    if (!btn) return;
    btn.disabled = !!busy;
    if (busy){ show(spinner); if (textEl) textEl.textContent = '–ü–æ–¥–æ–∂–¥–∏—Ç–µ...'; }
    else { hide(spinner); if (textEl) textEl.textContent = textDefault; }
  }
  function setError(el, msg){
    if (!el) return;
    el.textContent = msg || '';
    if (msg) {
      show(el);
      const card = el.closest('.auth');
      if (card){ card.classList.remove('shake'); requestAnimationFrame(()=> card.classList.add('shake')); }
    } else hide(el);
  }
  function routeByRole(role){
    if (role === 'moderator' || role === 'admin') { location.href = '/moder.html'; return; }
    location.href = '/user.html';
  }

  // ===== –¢–µ–º–∞: dark/light, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî dark =====
  const THEME_KEY = 'zero_theme';
  function getTheme(){
    const t = localStorage.getItem(THEME_KEY);
    return (t === 'light' || t === 'dark') ? t : 'dark';
  }
  function setTheme(theme){
    const html = document.documentElement;
    html.setAttribute('data-theme', theme);
    localStorage.setItem(THEME_KEY, theme);
    // –ò–∫–æ–Ω–∫–∞ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞
    const isDark = theme === 'dark';
    if (themeToggle){
      themeToggle.textContent = isDark ? '‚òÄÔ∏è' : 'üåô'; // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–ª—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
      themeToggle.title = isDark ? '–í–∫–ª—é—á–∏—Ç—å —Å–≤–µ—Ç–ª—É—é —Ç–µ–º—É' : '–í–∫–ª—é—á–∏—Ç—å —Ç—ë–º–Ω—É—é —Ç–µ–º—É';
      themeToggle.setAttribute('aria-label', themeToggle.title);
    }
  }
  function toggleTheme(){
    const next = getTheme() === 'dark' ? 'light' : 'dark';
    setTheme(next);
  }
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∫–æ–Ω–∫–∏ –ø–æ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–µ
  setTheme(getTheme());
  themeToggle?.addEventListener('click', toggleTheme);

  // –ï—Å–ª–∏ —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî —Ä–µ–¥–∏—Ä–µ–∫—Ç
  (async function checkAuth(){
    try{
      const res = await fetch(`${API_BASE}/auth/status`, { credentials:'include' });
      if (!res.ok) return;
      const data = await res.json();
      if (data?.isLoggedIn) routeByRole(data.role);
    }catch{}
  })();

  // –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–æ–ª—è
  toggleLoginPass?.addEventListener('click', ()=> togglePass(loginPassword, toggleLoginPass));
  function togglePass(input, btn){
    if (!input) return;
    const isPw = input.type === 'password';
    input.type = isPw ? 'text' : 'password';
    if (btn) btn.textContent = isPw ? 'üôà' : 'üëÅÔ∏è';
    input.focus({ preventScroll:true });
  }

  // CapsLock –¥–µ—Ç–µ–∫—Ç–æ—Ä
  loginPassword?.addEventListener('keyup', (e)=> {
    const caps = e.getModifierState && e.getModifierState('CapsLock');
    if (caps) show(capsHint); else hide(capsHint);
  });

  // –õ–æ–≥–∏–Ω: Enter –Ω–∞ username -> –∫ –ø–∞—Ä–æ–ª—é
  loginUsername?.addEventListener('keydown', (e)=>{
    if (e.key === 'Enter'){
      e.preventDefault();
      loginPassword?.focus();
    }
  });

  // –°–∞–±–º–∏—Ç –ª–æ–≥–∏–Ω–∞
  formLogin?.addEventListener('submit', async (e)=>{
    e.preventDefault();
    setError(loginMsg, '');

    const username = (loginUsername?.value || '').trim();
    const password = loginPassword?.value || '';

    if (!username){
      setError(loginMsg, '–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω.');
      loginUsername?.focus();
      return;
    }
    if (!password){
      setError(loginMsg, '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å.');
      loginPassword?.focus();
      return;
    }

    try{
      setBusy(btnLogin, btnLoginSpinner, btnLoginText, true, '–í–æ–π—Ç–∏');

      const res = await fetch(`${API_BASE}/auth/login`, {
        method:'POST',
        headers:{ 'Content-Type':'application/json' },
        credentials:'include',
        body: JSON.stringify({ username, password })
      });

      const isJson = (res.headers.get('content-type')||'').includes('application/json');
      const data = isJson ? await res.json() : { message: await res.text() };

      if (!res.ok){
        const msg = data.message || (res.status === 401 ? '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å.' : `–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ (${res.status})`);
        setError(loginMsg, msg);
        return;
      }

      routeByRole(data.role);
    }catch{
      setError(loginMsg, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É.');
    }finally{
      setBusy(btnLogin, btnLoginSpinner, btnLoginText, false, '–í–æ–π—Ç–∏');
    }
  });
});